var mongoose=require("mongoose"),fs=require("fs"),saml2=require("saml2-js"),Schema=mongoose.Schema,Metadata=require("../models/metadata.js"),Constants=require("../tools/constants.js"),SessionCache=require("../tools/session_cache.js"),prepareIndex=function(e,a,t){if("object"==typeof e){var n=Object.keys(e);""!=a&&(a+=".");for(var o=0;o<n.length;o++){var r=a+n[o];e[n[o]]&&e[n[o]].index&&(t.fields[r]="text",t.options.weights[r]=e[n[o]].index_weight),prepareIndex(e[n[o]],r,t)}}},DataModel=Metadata.DataModel;DataModel.find(function(e,a){if(e)return next(e);for(var t=0;t<a.length;t++){var n;try{var o=JSON.parse(a[t].datamodel?a[t].datamodel:"{}");o._updated_at="Date",o._company_code="String",o._user="String",o._files=[{type:Schema.Types.ObjectId,ref:"File"}],n=new Schema(o)}catch(r){console.log(r),n=new Schema({})}var i={fields:{},options:{name:"_search",weights:{}}},s=a[t].translation?a[t].translation:{};prepareIndex(s,"",i),n.index(i.fields,i.options),Metadata.Objects[a[t]._id]=mongoose.model(Constants.DataModelPrefix+a[t]._id,n)}Metadata.Objects[Constants.DataModelUserData]=Metadata.User});var sp_options={entity_id:"app1_saml_metadata.xml",private_key:fs.readFileSync("./server/ssl/app1-key.pem","utf8"),certificate:fs.readFileSync("./server/ssl/app1-cert.crt","utf8"),assert_endpoint:"https://app1.cloud/authentication/saml_callback",force_authn:!1,sign_get_request:!1,allow_unencrypted_assertion:!0};SessionCache.serviceProvider=new saml2.ServiceProvider(sp_options);

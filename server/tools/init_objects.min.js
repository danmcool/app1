var mongoose=require("mongoose"),fs=require("fs"),saml2=require("saml2-js"),Schema=mongoose.Schema,Metadata=require("../models/metadata.js"),Constants=require("../tools/constants.js"),SessionCache=require("../tools/session_cache.js"),prepareIndex=function(e,o,t){if("object"==typeof e){var r=Object.keys(e);""!=o&&(o+=".");for(var n=0;n<r.length;n++){var a=o+r[n];e[r[n]]&&e[r[n]].index&&(t.fields[a]="text",t.options.weights[a]=e[r[n]].index_weight),prepareIndex(e[r[n]],a,t)}}},DataModel=Metadata.DataModel;DataModel.find(function(e,o){if(e)return next(e);for(var t=0;t<o.length;t++){var r,n={};try{n=JSON.parse(o[t].datamodel)}catch(a){console.log(a)}if(n._ref==Constants.DataModelUserId)Metadata.Objects[o[t]._id]=Metadata.User;else{try{n._updated_at="Date",n._company_code="String",n._user="String",n._files=[{type:Schema.Types.ObjectId,ref:"File"}],r=new Schema(n)}catch(a){console.log(a),r=new Schema({})}var i={fields:{},options:{name:"_search",weights:{}}},s=o[t].projection?o[t].projection:{};prepareIndex(s,"",i),r.index(i.fields,i.options),Metadata.Objects[o[t]._id]=mongoose.model(Constants.DataModelPrefix+o[t]._id,r)}}});var sp_options={entity_id:"app1_saml_metadata.xml",private_key:fs.readFileSync("./server/ssl/app1-key.pem","utf8"),certificate:fs.readFileSync("./server/ssl/app1-cert.crt","utf8"),assert_endpoint:"https://app1.cloud/authentication/saml_callback",force_authn:!1,sign_get_request:!1,allow_unencrypted_assertion:!0};SessionCache.serviceProvider=new saml2.ServiceProvider(sp_options);

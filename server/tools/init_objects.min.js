var mongoose=require("mongoose"),fs=require("fs"),saml2=require("saml2-js"),Schema=mongoose.Schema,Metadata=require("../models/metadata.js"),Constants=require("../tools/constants.js"),SessionCache=require("../tools/session_cache.js"),prepareIndex=function(e,t,a){if("object"==typeof e){var o=Object.keys(e);""!=t&&(t+=".");for(var n=0;n<o.length;n++){var i=t+o[n];e[o[n]]&&e[o[n]].index&&(a.fields[i]="text",a.options.weights[i]=e[o[n]].index_weight),prepareIndex(e[o[n]],i,a)}}},DataModel=Metadata.DataModel;DataModel.find(function(e,t){if(e)return next(e);for(var a=0;a<t.length;a++){var o,n=JSON.parse(t[a].datamodel);if(n._ref==Constants.DataModelUserId)Metadata.Objects[t[a]._id]=Metadata.User;else{try{n._updated_at="Date",n._company_code="String",n._user="String",n._files=[{type:Schema.Types.ObjectId,ref:"File"}],o=new Schema(n)}catch(i){console.log(i),o=new Schema({})}var r={fields:{},options:{name:"_search",weights:{}}},s=t[a].projection?t[a].projection:{};prepareIndex(s,"",r),o.index(r.fields,r.options),Metadata.Objects[t[a]._id]=mongoose.model(Constants.DataModelPrefix+t[a]._id,o)}}});var sp_options={entity_id:"app1_saml_metadata.xml",private_key:fs.readFileSync("./server/ssl/app1-key.pem","utf8"),certificate:fs.readFileSync("./server/ssl/app1-cert.crt","utf8"),assert_endpoint:"https://app1.cloud/authentication/saml_callback",force_authn:!1,sign_get_request:!1,allow_unencrypted_assertion:!0};SessionCache.serviceProvider=new saml2.ServiceProvider(sp_options);
